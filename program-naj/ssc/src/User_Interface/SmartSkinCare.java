/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package User_Interface;

import Error_Logs.PathConfig;
import static Neural_Network.Training_NN.nN;
import static Neural_Network.Training_NN.template;
import static Neural_Network.Training_NN.tested;
import static Neural_Network.Training_NN.trained;
import static Image_Process.ImageProcess.LeftCheek;
import static Image_Process.ImageProcess.RightCheek;
import static Image_Process.SkinColour.SkinCol;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import weka.classifiers.Evaluation;
import weka.classifiers.lazy.IBk;
import weka.core.Instance;
import weka.core.Instances;

/**
 *
 * @author SC
 */

public class SmartSkinCare extends javax.swing.JFrame {

    public static PathConfig I_PATH = new PathConfig();
    public static String MainPath = (I_PATH.GetPaths("PImage"));
    private static  String trainDataPath="arff/train.arff";
    private static String testDataPath="arff/test.arff"; //1
    private static String dataSetTemplate="arff/template.arff";
    private static IBk nN;

    private static Instances trainSet;
    private static Instances testSet;
    private static Instances template;
    private static boolean trained = false;
    private static boolean tested = false;
String filename = null;


    /**
     * Creates new form SmartSkinCare
     */
    public SmartSkinCare() {
        initComponents();
      //  Startsys();
        RCButton.setOpaque(false);
RCButton.setContentAreaFilled(false);
LCButton.setOpaque(false);
LCButton.setContentAreaFilled(false);

      
        RCButton.hide();
        LCButton.hide();
    

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        LCButton = new javax.swing.JButton();
        RCButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        SkinColorjLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        HelpButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        LCButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 0), 2));
        LCButton.setOpaque(false);
        LCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LCButtonActionPerformed(evt);
            }
        });
        jLayeredPane1.add(LCButton);
        LCButton.setBounds(40, 280, 180, 210);

        RCButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 0), 2));
        RCButton.setOpaque(false);
        RCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RCButtonActionPerformed(evt);
            }
        });
        jLayeredPane1.add(RCButton);
        RCButton.setBounds(430, 280, 170, 210);

        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        jLabel1.setMaximumSize(new java.awt.Dimension(625, 625));
        jLabel1.setMinimumSize(new java.awt.Dimension(625, 625));
        jLabel1.setPreferredSize(new java.awt.Dimension(625, 625));
        jLayeredPane1.add(jLabel1);
        jLabel1.setBounds(10, 10, 625, 650);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton1.setText("Select Image");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        SkinColorjLabel.setText("jLabel2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(SkinColorjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(SkinColorjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(523, Short.MAX_VALUE))
        );

        jLayeredPane1.add(jPanel1);
        jPanel1.setBounds(650, 10, 430, 650);

        jLabel2.setFont(new java.awt.Font("Lucida Sans Typewriter", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 255));
        jLabel2.setText("Smart Skin Care");

        HelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/User_Interface/1472743359_Info.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1096, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 79, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(HelpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HelpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
     public static void SColor(String Color){
     
         String LL = Color;
       
     
     }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
JFileChooser fc = new JFileChooser();
        fc.showOpenDialog(null);
        File f = fc.getSelectedFile();
        filename = f.getAbsolutePath();
        ImageIcon imageIcon = new ImageIcon(filename);
        Image image = imageIcon.getImage();
        Image newimg = image.getScaledInstance(650, 625,  java.awt.Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(newimg);
        jLabel1.setIcon(imageIcon);
        RCButton.show();
        LCButton.show();
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void RCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RCButtonActionPerformed
    try {
        RightCheek(filename);  
        ImageIcon imageIcon = new ImageIcon(MainPath+"RightCheek.jpg");
        Image image = imageIcon.getImage();
        Image newimg = image.getScaledInstance(650, 625,  java.awt.Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(newimg);
        jLabel1.setIcon(imageIcon);
        SkinCol(MainPath+"RightCheek.jpg");
          RCButton.hide();
        LCButton.hide();
    } catch (Exception ex) {
        Logger.getLogger(SmartSkinCare.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_RCButtonActionPerformed

    private void LCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LCButtonActionPerformed
  
     try {
        LeftCheek(filename);        
    } catch (Exception ex) {
        Logger.getLogger(SmartSkinCare.class.getName()).log(Level.SEVERE, null, ex);
    } // TODO add your handling code here:
    }//GEN-LAST:event_LCButtonActionPerformed

    
    
    public void Startsys() {

           trainNet();
        if(isTrained()){
            
//            jProgressBar1.setValue(70);
//            jLabel6.setText("Testing the neural network....");
            int[] results = testNet();
            if(isTested()){
//            jLabel6.setText("Neural network ready....");
//            jLabel2.setText("Completed Neural network Testing with  ...");
//            jLabel3.setText("Correct classifications of: "+results[0]+" ");
//            jLabel4.setText("And Incorrect classifications of: "+results[1]+"");
            
                         }
               else{
                   jLabel1.setText("Testing process failed...");
                }
                   }
                    else{
                         jLabel1.setText("Training process failed...");
                    }

}
      
      
      
      
    public static String convertToMultiline(String orig)
{
    return  orig.replaceAll("\n", "<br>");
}
    
    
    
    
    
        //Train the neural netowrk
    public  void  trainNet() {
        
        System.out.println();
        try{
            loadTrainData();
            nN = new IBk();
            nN.buildClassifier(trainSet);
           // "Training Completed;
            trained = true;

        }catch (IOException e) {
            jLabel1.setText("Train file missing....");
            System.err.println(e.toString());
        } catch (Exception e) {
            System.err.println(e.toString());
        }
     }
    
    
    public  int[] testNet() {
     
       System.out.println();
        int[] results = new int[2];
        if (!trained) {
            jLabel1.setText("Neural netowrk is not trained....");
        } else {
            try {
                loadTestData();
                Evaluation tempEvaluator = new Evaluation(testSet);
                tempEvaluator.evaluateModel(nN, testSet);
                
                results[0]=(int)tempEvaluator.correct();
                results[1]=(int)tempEvaluator.incorrect();
                tested=true;
               // "Test completed;

            } catch (IOException e) {
                //"Test file missing
                System.out.println(e.toString());
            } catch (Exception e) {
                System.err.println(e.toString());
            }
        }
        return results;
    }
    
    public static ArrayList<Double> predictNumber(String[] instanceData) {
        
        ArrayList<Double> predictions = new ArrayList<>();
        if (!trained) {
            System.err.println("Neural netowrk is not trained....");
        } else {
            Instance temp = toInstance(instanceData);
            try {
                temp.setClassValue(nN.classifyInstance(temp));
                for(double d:nN.distributionForInstance(temp)){
                    // classify all the instance in array
                    predictions.add(d);
                }// giving a class value to the instance of teh image 
                // listing all the index
                predictions.add(temp.classValue());
                // adding the closes value to last with its class value
            } catch (Exception e) {
                System.err.println(e.toString());
            }
        }
        return predictions;
    }
    
    private static Instance toInstance(String[] instanceData){
        try{
            loadDataTemplate();
            Instance tempInstance = new Instance(template.numAttributes());
            tempInstance.setDataset(template);
            
            for(int index=0; index<instanceData.length;index++){
                tempInstance.setValue(index, instanceData[index]);
            }
            template.add(tempInstance);
        }
        catch(Exception e){
            System.err.println(e.toString());
        }
        return template.lastInstance();
    }
    
    
    private static void loadDataTemplate() throws IOException{
        //Loading the training data arff
        BufferedReader tempReader
                = new BufferedReader(new FileReader(dataSetTemplate));
        //Converting data in to instances
        template = new Instances(tempReader);
        //Class is last attribute in arff file type
        template.setClassIndex(template.numAttributes() - 1);
    }

    private static void loadTrainData() throws IOException {
        //Loading the training data arff
        BufferedReader tempReader
                = new BufferedReader(new FileReader(trainDataPath));
        //Converting data in to instances
        trainSet = new Instances(tempReader);
        //Class is last attribute in arff file type
        trainSet.setClassIndex(trainSet.numAttributes() - 1);
    }

    private static void loadTestData() throws IOException {
        //Loading the training data arff
        BufferedReader tempReader
                = new BufferedReader(new FileReader(testDataPath));
        //Converting data in to instances
        testSet = new Instances(tempReader);
        //Class is last attribute in arff file type
        testSet.setClassIndex(testSet.numAttributes() - 1);
    }
    
    public static boolean isTrained(){
        return trained;
    }
    
    public static boolean isTested(){
        return tested;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SmartSkinCare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SmartSkinCare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SmartSkinCare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SmartSkinCare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SmartSkinCare().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton HelpButton;
    private javax.swing.JButton LCButton;
    private javax.swing.JButton RCButton;
    private javax.swing.JLabel SkinColorjLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
